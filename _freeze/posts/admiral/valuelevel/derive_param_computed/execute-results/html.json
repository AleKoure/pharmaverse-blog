{
  "hash": "3db5a3b18b8a694557e8452797a69496",
  "result": {
    "markdown": "---\ntitle: \"Derive a new parameter computed from the value of other parameters\"\nauthor:\n  - name: Kangjie Zhang\n\ndescription: \"Use `admiral::derive_param_computed()` like a calculator to derive new parameters/rows based on existing ones\"\ndate: \"2023-05-03\"\ncategories: [R, admiral, Valuelevel]\nimage: \"derive_param_computed.jpg\"\n---\n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\n## Introduction\n\nWhen creating ADaM Basic Data Structure (BDS) datasets, we often encounter deriving a new parameter based on the analysis values (e.g., AVAL) of other parameters.\n\nThe `admiral` function `derive_param_computed()` works like a calculator to derive new records without worrying about merging and combining datasets, all you need is a derivation formula, which also improves the readability of the code. \n\n\n## Example\n\nA valuelevel validation use case, where `derive_param_computed()` is used to validate a derived parameter - `PARAMCD = ADPCYMG` (Actual Dose per Cycle) in ADEX dataset. \n\n### Derivation text\nActual Dose per Cycle is derived from the Total Amount of Dose (`PARAMCD=TOTDOSE`) / Number of Cycles (`PARAMCD=NUMCYC`)\n\n### Derivation formula\n\nIn this example, `ADEX.AVAL when ADEX.PARAMCD = ADPCYMG` can be derived as:\n\n$$\nAVAL (PARAMCD = ADPCYMG) = \\frac{AVAL (PARAMCD = TOTDOSE)}{AVAL (PARAMCD = NUMCYC)}\n$$\n\n``` r\n# read in data\npath_ads <- \"\"\nadex <- haven::read_sas(paste0(path_ads, \"adex.sas7bdat\")) %>% \n  select(USUBJID, PARAM, PARAMCD, AVAL)\n\n# subset input data to PARAMCD = \"TOTDOSE\", \"NUMCYC\"\nadex_TOTDOSE_NUMCYC <- adex %>% filter(PARAMCD %in% c(\"TOTDOSE\", \"NUMCYC\"))\n# admiral::derive_param_computed()\nval <- \n  derive_param_computed(\n  adex_TOTDOSE_NUMCYC,\n  by_vars = exprs(USUBJID),\n  parameters = c(\"TOTDOSE\", \"NUMCYC\"),\n  analysis_value = AVAL.TOTDOSE / AVAL.NUMCYC,\n  set_values_to = exprs(\n    PARAMCD = \"ADPCYMG\",\n    PARAM = \"Actual Dose per Cycle (mg)\"\n  )\n) \n\n# compare with primary\ndiffdf::diffdf(adex %>% filter(PARAMCD == \"ADPCYMG\"), \n               val %>% filter(PARAMCD == \"ADPCYMG\"), \n               keys = c(\"USUBJID\", \"PARAMCD\"))\n```\n\n<!--------------- appendices go here ----------------->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}