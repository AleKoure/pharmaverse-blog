{
<<<<<<< HEAD
  "hash": "eacab8e3ee7c18938913b907aff847fb",
  "result": {
    "markdown": "---\ntitle: \"Using CICD to check spelling in quarto documents\"\nauthor:\n  - name: Stefan Thoma\n\ndescription: \"This post explains how to use GitHub to automatically check the spelling of your quarto document through the process of continuous integration and deployment (CICD).\"\ndate: \"2023-03-07\"\ncategories: [CICD, R, GitHub, Quarto]\nimage: \"xportr_rev.png\"\n---\n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nAs a data scientist or R programmer, you may be familiar with the benefits of version control systems like GitHub for tracking changes to your code base and collaborating with others.\nBut did you know that you can also use GitHub to automate the testing, building, and deployment of your R projects?\nThis process, known as continuous integration and deployment (CICD), can save you time and effort by ensuring that your code is always in a deploy-able state and by automatically delivering new updates to your users.\nIn this blog post, we will show you how to set up CICD for your quarto documents on GitHub, including configuring a build pipeline and integrating a spelling checker.\nBy the end of this tutorial, you will have a workflow in place that helps you catch spelling mistakes before they make it into your final documents.\n\n## CICD\n\nCICD is often used in GitHub projects for package development where it helps to maintain a certain code-quality and style consistency across different contributors and developers.\nFor R projects other than packages CICD is used much less frequently.\nI belief that setting up CICD pipelines for less complex projects with only very few contributors is still useful to ensure consistent style, spelling, and more.\n\nAs I am occasionally involved in creating teaching materials in R using quarto, I wanted to implement some CICD checks for quarto documents.\nAs most out-of-the-box CICD pipelines are designed for package development, existing pipelines needed some adjustment to work with other R projects.\n\n## Aim\n\nWhen creating teaching materials in R I rely on GitHub for version control.\nGenerally, I have a `main`-branch which deploys to a GitHub-page displaying the rendered content.\nThe development of materials happens on the `devel` branch with a pending merge request to the `main` branch.\nWhenever a chapter or a section is ready to be published, I merge the branches.\nI wanted to create a pipeline that runs a spell-check on all my quarto files on the merge request with `main`, i.e.: Whenever I push to `devel` I want GitHub to run the CICD pipeline to check my spelling.\nAs an example, I will show how to implement spelling CICD on this blog-project.\n\n## Spell-check\n\nBecause R is all I know, I would like to use an R-package to do the spell-checking.\nThe `spelling` package is well suited for the task, as it allows to spell-check all files at once.\nBefore we try to implement the CICD pipeline, the spell-checker has to work locally, so we first install and load the package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(spelling)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(spelling)\n```\n:::\n\n\nIf you are working on a package, you can directly use the function `spell_check_package()` and the `spelling` package will do so.\nIf you are working on any other R project you have to use the `spell_check_files()` function and you have to include a path to the files you want to check.\nLet's check just this file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2023-01-09_CICD-spelling/\nspelling::spell_check_files(path = \"index.qmd\") %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  WORD      FOUND IN\naff       index.qmd:348,349,350\ncallout   index.qmd:114\nCICD      index.qmd:2,6,8,16,27,28,31,33,34,35,37,38,46,47,53,70,122,139,167,170,172,173,174,176,278,322,411,412,415\ncran      index.qmd:103\nde        index.qmd:349,350,357,367,391,400,401,414\ndesc      index.qmd:261,305,399\n```\n:::\n:::\n\n\nIt looks like there are a few words that spelling did not recognize.\nWe should carefully look through the full list and decide whether any mistakes were made.\nWe would not want the GitHub action to prohibit a merge request for any of these words, as there are no typos present (I hope).\nTherefore, we want to add these words to a file that include words to be ignored by the `spelling` package.\n\nIf you are working on a package, this is easy, you can use the `spelling::update_wordlist()` function.\nWe simply save the list of words as a *.txt* file.\nFor now, we save it in the working directory.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite(spelling::spell_check_files(path = \"index.qmd\")[[1]], \"WORDLIST.txt\")\n```\n:::\n\n\nThe file looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_lines(\"WORDLIST.txt\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"aff\"            \"callout\"        \"CICD\"           \"cran\"          \n [5] \"de\"             \"desc\"           \"dic\"            \"djnavarro\"     \n [9] \"doch\"           \"eval\"           \"frami\"          \"FRAMI\"         \n[13] \"german\"         \"github\"         \"hört\"           \"https\"         \n[17] \"hunspell\"       \"ìnst\"           \"jeder\"          \"JetBrains\"     \n[21] \"JW\"             \"lang\"           \"lockfile\"       \"md\"            \n[25] \"nur\"            \"png\"            \"pre\"            \"qmd\"           \n[29] \"qmd's\"          \"readme\"         \"readr\"          \"renv\"          \n[33] \"repo\"           \"Rproj\"          \"Rscript\"        \"StefanThoma\"   \n[37] \"subfolders\"     \"testthat\"       \"Thoma\"          \"tidyverse\"     \n[41] \"ubuntu\"         \"verowokjnsthet\" \"versteht\"       \"versthet\"      \n[45] \"von\"            \"wordlist\"       \"WORDLIST\"       \"xportr\"        \n[49] \"yaml\"           \"yml\"            \"zitat\"          \"Zitat\"         \n```\n:::\n:::\n\n\nNow we can tell `spelling` to ignore the words in this file from typo-detection:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspelling::spell_check_files(\n  path = \"index.qmd\",\n  ignore = read_lines(\"WORDLIST.txt\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNo spelling errors found.\n```\n:::\n:::\n\n\nYou can find a more comprehensive guide to the `spelling` package [in the package manual.](https://cran.r-project.org/web/packages/spelling/spelling.pdf)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# we can get all qmd's in a project by\nlist.files(\n  path = \"../..\", # first setting the path to the project\n  recursive = TRUE, # include subfolders\n  pattern = \".*.qmd$\"\n) # include only files ending in .qmd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"index.qmd\"                               \n[2] \"posts/2023-01-09_CICD-spelling/index.qmd\"\n[3] \"posts/2023-01-09_welcome/index.qmd\"      \n```\n:::\n:::\n\n\n::: callout-caution\n## path\n\nThe structure of this project is such that each blog-post `.qmd` file is two folders down from the `.Rproj` file.\nThe working directory of the .qmd blog-post file is where the file is located.\nIf I want to list files or save files in a higher order folder I need to adjust my path to first go two folders up.\nI do this by adding `\"../..\"` to my file paths.\n\nThe working directory of the CICD pipeline is by default on project level, therefore, the `\"../..\"` is not required.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwordlist <- list.files(\n  path = \"../..\",\n  recursive = TRUE,\n  full.names = TRUE,\n  pattern = \".*.qmd$\"\n) %>%\n  spelling::spell_check_files()\n```\n:::\n\n\nNow you should take a good look at the output and fix any typos spotted.\n\n\nWhat remains is a list of words to be ignored.\nThey can now be saved into a project level `WORDLIST_EXAMPLE.txt` file to be accessed later by our CICD workflow.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite(x = wordlist[[1]], file = \"../../inst/WORDLIST_EXAMPLE.txt\")\n```\n:::\n\n\nCheck again with `WORDLIST_EXAMPLE.txt`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files(\n  path = \"../..\",\n  recursive = TRUE,\n  full.names = TRUE,\n  pattern = \".*.qmd$\"\n) %>%\n  spelling::spell_check_files(ignore = read_lines(\"../../inst/WORDLIST_EXAMPLE.txt\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNo spelling errors found.\n```\n:::\n:::\n\n\nLooks like it worked --- great!\n\n### Append WORDLIST\n\nIt makes sense to check the spelling locally before you push to your `develop` branch.\nFor this purpose I create an r-script where I can run the spell-check for the project and where I can also append the `WORDLIST.txt` file if needed.\n\n\n::: {.cell file='CICD-Spellcheck.R'}\n\n```{.r .cell-code}\n#-------------------------- spell-check ----------------------------------------\n\n# create empty wordlist:\n# write(\"\", file =   \"../../inst/WORDLIST_EXAMPLE.txt\")\n# check spelling:\nspelling::spell_check_files(list.files(pattern = \".*.qmd$\", recursive = TRUE),\n  ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\")\n)\n\n# now check those words and whether or not they are really mistakes.\n# once you fixed all mistaked you can:\nwords <- spelling::spell_check_files(list.files(pattern = \".*.qmd$\", recursive = TRUE),\n  ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\")\n)\n# now you can add words to the wordlist\n#-- uncomment the following line\n# write(words[[1]], file =   \"inst/WORDLIST_EXAMPLE.txt\", append = TRUE)\n\nspelling::spell_check_files(list.files(pattern = \".*.qmd$\", recursive = TRUE),\n  ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\")\n)\n```\n:::\n\n\n## Setup CICD Workflow\n\nNow this needs to be implemented in the CICD pipeline.\nTo implement GitHub CICD I create a folder `.github` in the project directory, and the folder `workflows` within the `.github` folder.\nThis is where CICD pipelines are stored.\n\nCICD pipelines are written in `yaml` format, it should look like this:\n\n``` yaml\n#| eval: false\nname: Spellcheck\non:\n  pull_request: {branches: ['main']}\njobs:\n  Spelling:\n    runs-on: ubuntu-latest\n    container: {image: \"rocker/tidyverse:4.2.1\"}\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n\n      - name: Install spelling\n        run: if (!require(\"spelling\")) install.packages(\"spelling\")\n        shell: Rscript {0}\n\n      - name: Run Spelling Check test\n        run: spelling::spell_check_files(list.files(pattern = \".*.qmd$\", recursive = TRUE), ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\"))\n        shell: Rscript {0}\n```\n\nThe first few lines define the name of the workflow (`Spellcheck`) and when it should be executed.\\\n\nIn this case, the action runs on pull requests to the `main` branch.\n\n``` yaml\n#| eval: false\nname: Spellcheck\non:\n  pull_request: {branches: ['main']}\n```\n\nThen, we define the job to run:\n\n``` yaml\njobs:\n  Spelling:\n    runs-on: ubuntu-latest\n    container: {image: \"rocker/tidyverse:4.2.1\"}\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n\n      - name: Install spelling\n        run: if (!require(\"spelling\")) install.packages(\"spelling\")\n        shell: Rscript {0}\n\n      - name: Run Spelling Check test\n        run: spelling::spell_check_files(list.files(pattern = \".*.qmd$\", recursive = TRUE), ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\"))\n        shell: Rscript {0}\n        \n```\n\nWe run just one job called `Spelling`.\n\nIt is run on a [docker image](https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/) deployed by GitHub.\nWe use a particular docker image that comes with R and tidyverse pre-installed, this eases the use of R in this image.\n\nThe actual workflow is defined in the `steps` (which can be named) --- here we only have three steps.\n\n-   `actions/checkout@v3` loads the GitHub repository so the subsequent steps can reference the repo.\n\n-   Next, the *Install spelling* step installs the R package `spelling`.\n    This is written in R code, so we need to specify that we run the command in R.\n    We do this with the instruction `shell: Rscript {0}`.\n\n-   At last, we run the spell check in R.\n    By default, the code is executed in the project level directory, so we do not need to adjust the path in the `list.files()` function to go up the project directory.\n    The same goes for the `ìnst/WORDLIST_EXAMPLE.txt` file.\n\nNow while this works, it will not throw an error if typos are spotted.\nWe can remedy this by writing code that throws an error if there is a typo. \nThe `testthat` package is designed to test R code for packages. \nWe use its `test_that()` function together with the `expect_equal()` function where we can specify the test we want to conduct. \nOur test is simple: As the `object` argument we run the spell-check from above. \nThe output we expect is a spell-check that did not result in any error. \nWe have to supply such an object representing a flawless spell-check in the `expected` argument. \nTo always get such an object we simply spell-check the `WORDLIST_EXAMPLE.txt` file using itself as the list of words to ignore:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntestthat::test_that(\n  desc = \"No Typo\",\n  code = testthat::expect_equal(\n    object = spelling::spell_check_files(\n      path = list.files(\n        path = \"../..\", pattern = \".*.qmd$\",\n        recursive = TRUE, full.names = TRUE\n      ),\n      ignore = readr::read_lines(\"../../inst/WORDLIST_EXAMPLE.txt\")\n    ),\n    expected = spelling::spell_check_files(\n      path = \"../../inst/WORDLIST_EXAMPLE.txt\",\n      ignore = readr::read_lines(\"../../inst/WORDLIST_EXAMPLE.txt\")\n    )\n  )\n)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in loadNamespace(x): there is no package called 'testthat'\n```\n:::\n:::\n\n\nWe can now implement this test into our CICD workflow:\n\n\n::: {.cell}\n\n```{.yaml .cell-code}\nname: Spellcheck\non:\n  pull_request: {branches: ['main']}\njobs:\n  Spelling:\n    runs-on: ubuntu-latest\n    container: {image: \"rocker/tidyverse:4.2.1\"}\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n\n      - name: Install spelling\n        run: if (!require(\"spelling\")) install.packages(\"spelling\")\n        shell: Rscript {0}\n\n      - name: Run Spelling Check test\n        run: spelling::spell_check_files(list.files(pattern = \".*.qmd$\", recursive = TRUE), ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\"))\n        shell: Rscript {0}\n\n      - name: Install testthat\n        run: if (!require(\"testthat\")) install.packages(\"testthat\")\n        shell: Rscript {0}\n\n      - name: test typos\n        run: testthat::test_that(desc = \"No Typo\", code = {\n        no_problem <- spelling::spell_check_files(path = \"inst/WORDLIST_EXAMPLE.txt\", ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\"))\n        spellcheck <- spelling::spell_check_files(list.files(pattern = \".*.qmd$\", recursive = TRUE), ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\"))\n        testthat::expect_equal(object = spellcheck, expected = no_problem)\n        })\n        shell: Rscript {0}\n```\n:::\n\n\n\n## Change language\n\nThis works fine for English, but what if we write in German?\nThe `spelling` package depends on the `hunspell` package.\nThis package comes with the English dictionary pre-installed.\nFurther, it looks at the user library for any other dictionaries requested in the `spelling` function call.\n\nWe can add dictionaries to the user library in the OS we are using to locally check the spelling in our projects.\nAs soon as we want to spell-check on GitHub (with CICD) it gets a bit more tricky because we need to reference a library file within the CICD workflow.\n\nLet's write a file that contains a German quote (by *JW von Goethe*).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# zitat <- file(\"Zitat.txt\", encoding = \"UTF-8\")\n# write(x = \"Es hört doch jeder nur, was er verowokjnsthet.\", file = \"Zitat.txt\")\nwrite_lines(\"Es hört doch jeder nur, was er versthet.\", file = \"Zitat.txt\")\n```\n:::\n\n\nThe `spelling` package does not recognize the language in a file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspelling::spell_check_files(\"Zitat.txt\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  WORD       FOUND IN\ndoch       Zitat.txt:1\nhört      Zitat.txt:1\njeder      Zitat.txt:1\nnur        Zitat.txt:1\nversthet   Zitat.txt:1\n```\n:::\n:::\n\n\nWe can list the dictionaries that are currently available to the hunspell package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunspell::list_dictionaries()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"en_AU\" \"en_CA\" \"en_GB\" \"en_US\"\n```\n:::\n:::\n\n\nApparently, only English dictionaries are available at the moment.\nYou can download UTF-8 encoded dictionaries from the [LibreOffice GitHub repo fork](https://github.com/JetBrains/hunspell-dictionaries).\nFor me, the easiest way was to download the entire repo as a `.zip` folder and then move the dictionary files manually into the repo in which you want to spell-check using that dictionary.\n\n`hunspell` requires two dictionary files for a language: the `.dic` and the `.aff` file.\nIn this example we take the German dictionary files `de_DE_frami.aff` and `de_DE_frami.dic` and save them in the `inst` folder where our `WORDLIST_EXAMPLE.txt` file is as well.\nI am not sure why, but sometimes `hunspell` will look for the file `de_CH_FRAMI.dic` when we specify `lang = \"inst/de_CH_frami\"` so make sure to rename the `.dic` and `.aff` files as `de_DE_FRAMI.aff` and `de_DE_FRAMI.dic`, just to be sure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files(\"../../inst\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"de_CH_FRAMI.aff\"      \"de_CH_FRAMI.dic\"      \"de_DE_FRAMI.aff\"     \n[4] \"de_DE_FRAMI.dic\"      \"WORDLIST_EXAMPLE.txt\" \"WORDLIST.txt\"        \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nspelling::spell_check_files(\"Zitat.txt\", lang = \"../../inst/de_CH_FRAMI\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  WORD        FOUND IN\nversthet.   Zitat.txt:1\n```\n:::\n:::\n\n\nNow we just have to fix the error and check again.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_lines(\"Es hört doch jeder nur, was er versteht.\", file = \"Zitat.txt\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nspelling::spell_check_files(\"Zitat.txt\", lang = \"../../inst/de_CH_FRAMI\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNo spelling errors found.\n```\n:::\n:::\n\n\nThe `.yml` file for the german spell-check would like this: \n\n\n\n::: {.cell}\n\n```{.yml .cell-code}\nname: Spellcheck\non:\n  pull_request: {branches: ['main']}\njobs:\n  Spelling:\n    runs-on: ubuntu-latest\n    container: {image: \"rocker/tidyverse:4.2.1\"}\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n\n      - name: Install spelling\n        run: if (!require(\"spelling\")) install.packages(\"spelling\")\n        shell: Rscript {0}\n\n      - name: Run Spelling Check test\n        run: spelling::spell_check_files(list.files(pattern = \".*.qmd$\", recursive = TRUE), ignore = readr::read_lines(\"inst/WORDLIST.txt\"), lang = \"inst/de_CH_frami\")\n        shell: Rscript {0}\n\n      - name: Install testthat\n        run: if (!require(\"testthat\")) install.packages(\"testthat\")\n        shell: Rscript {0}\n\n      - name: test typos\n        run: testthat::test_that(desc = \"No Typo\", code = {\n        no_problem <- spelling::spell_check_files(path = \"inst/WORDLIST_EXAMPLE.txt\", ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\"), lang = \"inst/de_CH_FRAMI\")\n        spellcheck <- spelling::spell_check_files(list.files(pattern = \".*.qmd$\", recursive = TRUE), ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\"), lang = \"inst/de_CH_FRAMI\")\n        testthat::expect_equal(object = spellcheck, expected = no_problem)\n        })\n        shell: Rscript {0}\n```\n:::\n\n\n\n## Conclusion\n\nYou should now be able to run a spell-check on your quarto files. \nFurther, you know how to implement a GitHub CICD pipeline for spell-checks in any language with available dictionary files. \nThis also allows you to implement other R-code based CICD pipelines. \n\nFor your (and my) convenience, I have created book-templates for both [English](https://github.com/StefanThoma/en_quarto_template) and [German](https://github.com/StefanThoma/de_quarto_template) quarto books.\nThey include CICD pipelines for both spelling and style check, and also implement a CICD publishing workflow. \nPlease read the respective `readme.md` file for more information.\n\n<!--------------- appendices go here ----------------->\n",
=======
  "hash": "193780bdcb6f71427bab19165b3d6cb5",
  "result": {
    "markdown": "---\ntitle: \"Using CICD to check spelling in quarto documents\"\nauthor:\n  - name: Stefan Thoma\n\ndescription: \"This post explains how to use GitHub to automatically check the spelling of your quarto document through the process of continuous integration and deployment (CICD).\"\ndate: \"2023-03-07\"\ncategories: [CICD, R, GitHub, Quarto]\nimage: \"xportr_rev.png\"\n---\n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nAs a data scientist or R programmer, you may be familiar with the benefits of version control systems like GitHub for tracking changes to your code base and collaborating with others.\nBut did you know that you can also use GitHub to automate the testing, building, and deployment of your R projects?\nThis process, known as continuous integration and deployment (CICD), can save you time and effort by ensuring that your code is always in a deploy-able state and by automatically delivering new updates to your users.\nIn this blog post, we will show you how to set up CICD for your quarto documents on GitHub, including configuring a build pipeline and integrating a spelling checker.\nBy the end of this tutorial, you will have a workflow in place that helps you catch spelling mistakes before they make it into your final documents.\n\n## CICD\n\nCICD is often used in GitHub projects for package development where it helps to maintain a certain code-quality and style consistency across different contributors and developers.\nFor R projects other than packages CICD is used much less frequently.\nI belief that setting up CICD pipelines for less complex projects with only very few contributors is still useful to ensure consistent style, spelling, and more.\n\nAs I am occasionally involved in creating teaching materials in R using quarto, I wanted to implement some CICD checks for quarto documents.\nAs most out-of-the-box CICD pipelines are designed for package development, existing pipelines needed some adjustment to work with other R projects.\n\n## Aim\n\nWhen creating teaching materials in R I rely on GitHub for version control.\nGenerally, I have a `main`-branch which deploys to a GitHub-page displaying the rendered content.\nThe development of materials happens on the `devel` branch with a pending merge request to the `main` branch.\nWhenever a chapter or a section is ready to be published, I merge the branches.\nI wanted to create a pipeline that runs a spell-check on all my quarto files on the merge request with `main`, i.e.: Whenever I push to `devel` I want GitHub to run the CICD pipeline to check my spelling.\nAs an example, I will show how to implement spelling CICD on this blog-project.\n\n## Spell-check\n\nBecause R is all I know, I would like to use an R-package to do the spell-checking.\nThe `spelling` package is well suited for the task, as it allows to spell-check all files at once.\nBefore we try to implement the CICD pipeline, the spell-checker has to work locally, so we first install and load the package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"spelling\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(spelling)\n```\n:::\n\n\nIf you are working on a package, you can directly use the function `spell_check_package()` and the `spelling` package will do so.\nIf you are working on any other R project you have to use the `spell_check_files()` function and you have to include a path to the files you want to check.\nLet's check just this file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2023-01-09_CICD-spelling/\nspelling::spell_check_files(path = \"index.qmd\") %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  WORD      FOUND IN\naff       index.qmd:348,349,350\ncallout   index.qmd:114\nCICD      index.qmd:2,6,8,16,27,28,31,33,34,35,37,38,46,47,53,70,122,139,167,170,172,173,174,176,278,322,411,412,415\ncran      index.qmd:103\nde        index.qmd:349,350,357,367,391,400,401,414\ndesc      index.qmd:261,305,399\n```\n:::\n:::\n\n\nIt looks like there are a few words that spelling did not recognize.\nWe should carefully look through the full list and decide whether any mistakes were made.\nWe would not want the GitHub action to prohibit a merge request for any of these words, as there are no typos present (I hope).\nTherefore, we want to add these words to a file that include words to be ignored by the `spelling` package.\n\nIf you are working on a package, this is easy, you can use the `spelling::update_wordlist()` function.\nWe simply save the list of words as a *.txt* file.\nFor now, we save it in the working directory.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite(spelling::spell_check_files(path = \"index.qmd\")[[1]], \"WORDLIST.txt\")\n```\n:::\n\n\nThe file looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_lines(\"WORDLIST.txt\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"aff\"            \"callout\"        \"CICD\"           \"cran\"          \n [5] \"de\"             \"desc\"           \"dic\"            \"djnavarro\"     \n [9] \"doch\"           \"eval\"           \"frami\"          \"FRAMI\"         \n[13] \"german\"         \"github\"         \"hört\"           \"https\"         \n[17] \"hunspell\"       \"ìnst\"           \"jeder\"          \"JetBrains\"     \n[21] \"JW\"             \"lang\"           \"lockfile\"       \"md\"            \n[25] \"nur\"            \"png\"            \"pre\"            \"qmd\"           \n[29] \"qmd's\"          \"readme\"         \"readr\"          \"renv\"          \n[33] \"repo\"           \"Rproj\"          \"Rscript\"        \"StefanThoma\"   \n[37] \"subfolders\"     \"testthat\"       \"Thoma\"          \"tidyverse\"     \n[41] \"ubuntu\"         \"verowokjnsthet\" \"versteht\"       \"versthet\"      \n[45] \"von\"            \"wordlist\"       \"WORDLIST\"       \"xportr\"        \n[49] \"yaml\"           \"yml\"            \"zitat\"          \"Zitat\"         \n```\n:::\n:::\n\n\nNow we can tell `spelling` to ignore the words in this file from typo-detection:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspelling::spell_check_files(\n  path = \"index.qmd\",\n  ignore = read_lines(\"WORDLIST.txt\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNo spelling errors found.\n```\n:::\n:::\n\n\nYou can find a more comprehensive guide to the `spelling` package [in the package manual.](https://cran.r-project.org/web/packages/spelling/spelling.pdf)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# we can get all qmd's in a project by\nlist.files(\n  path = \"../..\", # first setting the path to the project\n  recursive = TRUE, # include subfolders\n  pattern = \".*.qmd$\"\n) # include only files ending in .qmd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"index.qmd\"                               \n[2] \"posts/2023-01-09_CICD-spelling/index.qmd\"\n[3] \"posts/2023-01-09_welcome/index.qmd\"      \n```\n:::\n:::\n\n\n::: callout-caution\n## path\n\nThe structure of this project is such that each blog-post `.qmd` file is two folders down from the `.Rproj` file.\nThe working directory of the .qmd blog-post file is where the file is located.\nIf I want to list files or save files in a higher order folder I need to adjust my path to first go two folders up.\nI do this by adding `\"../..\"` to my file paths.\n\nThe working directory of the CICD pipeline is by default on project level, therefore, the `\"../..\"` is not required.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwordlist <- list.files(\n  path = \"../..\",\n  recursive = TRUE,\n  full.names = TRUE,\n  pattern = \".*.qmd$\"\n) %>%\n  spelling::spell_check_files()\n```\n:::\n\n\nNow you should take a good look at the output and fix any typos spotted.\n\n\nWhat remains is a list of words to be ignored.\nThey can now be saved into a project level `WORDLIST_EXAMPLE.txt` file to be accessed later by our CICD workflow.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite(x = wordlist[[1]], file = \"../../inst/WORDLIST_EXAMPLE.txt\")\n```\n:::\n\n\nCheck again with `WORDLIST_EXAMPLE.txt`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files(\n  path = \"../..\",\n  recursive = TRUE,\n  full.names = TRUE,\n  pattern = \".*.qmd$\"\n) %>%\n  spelling::spell_check_files(ignore = read_lines(\"../../inst/WORDLIST_EXAMPLE.txt\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNo spelling errors found.\n```\n:::\n:::\n\n\nLooks like it worked --- great!\n\n### Append WORDLIST\n\nIt makes sense to check the spelling locally before you push to your `develop` branch.\nFor this purpose I create an r-script where I can run the spell-check for the project and where I can also append the `WORDLIST.txt` file if needed.\n\n\n::: {.cell file='CICD-Spellcheck.R'}\n\n```{.r .cell-code}\n#-------------------------- spell-check ----------------------------------------\n\n# create empty wordlist:\n# write(\"\", file =   \"../../inst/WORDLIST_EXAMPLE.txt\")\n# check spelling:\nspelling::spell_check_files(list.files(pattern = \".*.qmd$\", recursive = TRUE),\n  ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\")\n)\n\n# now check those words and whether or not they are really mistakes.\n# once you fixed all mistaked you can:\nwords <- spelling::spell_check_files(list.files(pattern = \".*.qmd$\", recursive = TRUE),\n  ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\")\n)\n# now you can add words to the wordlist\n#-- uncomment the following line\n# write(words[[1]], file =   \"inst/WORDLIST_EXAMPLE.txt\", append = TRUE)\n\nspelling::spell_check_files(list.files(pattern = \".*.qmd$\", recursive = TRUE),\n  ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\")\n)\n```\n:::\n\n\n## Setup CICD Workflow\n\nNow this needs to be implemented in the CICD pipeline.\nTo implement GitHub CICD I create a folder `.github` in the project directory, and the folder `workflows` within the `.github` folder.\nThis is where CICD pipelines are stored.\n\nCICD pipelines are written in `yaml` format, it should look like this:\n\n``` yaml\n#| eval: false\nname: Spellcheck\non:\n  pull_request: {branches: ['main']}\njobs:\n  Spelling:\n    runs-on: ubuntu-latest\n    container: {image: \"rocker/tidyverse:4.2.1\"}\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n\n      - name: Install spelling\n        run: if (!require(\"spelling\")) install.packages(\"spelling\")\n        shell: Rscript {0}\n\n      - name: Run Spelling Check test\n        run: spelling::spell_check_files(list.files(pattern = \".*.qmd$\", recursive = TRUE), ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\"))\n        shell: Rscript {0}\n```\n\nThe first few lines define the name of the workflow (`Spellcheck`) and when it should be executed.\\\n\nIn this case, the action runs on pull requests to the `main` branch.\n\n``` yaml\n#| eval: false\nname: Spellcheck\non:\n  pull_request: {branches: ['main']}\n```\n\nThen, we define the job to run:\n\n``` yaml\njobs:\n  Spelling:\n    runs-on: ubuntu-latest\n    container: {image: \"rocker/tidyverse:4.2.1\"}\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n\n      - name: Install spelling\n        run: if (!require(\"spelling\")) install.packages(\"spelling\")\n        shell: Rscript {0}\n\n      - name: Run Spelling Check test\n        run: spelling::spell_check_files(list.files(pattern = \".*.qmd$\", recursive = TRUE), ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\"))\n        shell: Rscript {0}\n        \n```\n\nWe run just one job called `Spelling`.\n\nIt is run on a [docker image](https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/) deployed by GitHub.\nWe use a particular docker image that comes with R and tidyverse pre-installed, this eases the use of R in this image.\n\nThe actual workflow is defined in the `steps` (which can be named) --- here we only have three steps.\n\n-   `actions/checkout@v3` loads the GitHub repository so the subsequent steps can reference the repo.\n\n-   Next, the *Install spelling* step installs the R package `spelling`.\n    This is written in R code, so we need to specify that we run the command in R.\n    We do this with the instruction `shell: Rscript {0}`.\n\n-   At last, we run the spell check in R.\n    By default, the code is executed in the project level directory, so we do not need to adjust the path in the `list.files()` function to go up the project directory.\n    The same goes for the `ìnst/WORDLIST_EXAMPLE.txt` file.\n\nNow while this works, it will not throw an error if typos are spotted.\nWe can remedy this by writing code that throws an error if there is a typo. \nThe `testthat` package is designed to test R code for packages. \nWe use its `test_that()` function together with the `expect_equal()` function where we can specify the test we want to conduct. \nOur test is simple: As the `object` argument we run the spell-check from above. \nThe output we expect is a spell-check that did not result in any error. \nWe have to supply such an object representing a flawless spell-check in the `expected` argument. \nTo always get such an object we simply spell-check the `WORDLIST_EXAMPLE.txt` file using itself as the list of words to ignore:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntestthat::test_that(\n  desc = \"No Typo\",\n  code = testthat::expect_equal(\n    object = spelling::spell_check_files(\n      path = list.files(\n        path = \"../..\", pattern = \".*.qmd$\",\n        recursive = TRUE, full.names = TRUE\n      ),\n      ignore = readr::read_lines(\"../../inst/WORDLIST_EXAMPLE.txt\")\n    ),\n    expected = spelling::spell_check_files(\n      path = \"../../inst/WORDLIST_EXAMPLE.txt\",\n      ignore = readr::read_lines(\"../../inst/WORDLIST_EXAMPLE.txt\")\n    )\n  )\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest passed 🌈\n```\n:::\n:::\n\n\nWe can now implement this test into our CICD workflow:\n\n\n::: {.cell}\n\n```{.yaml .cell-code}\nname: Spellcheck\non:\n  pull_request: {branches: ['main']}\njobs:\n  Spelling:\n    runs-on: ubuntu-latest\n    container: {image: \"rocker/tidyverse:4.2.1\"}\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n\n      - name: Install spelling\n        run: if (!require(\"spelling\")) install.packages(\"spelling\")\n        shell: Rscript {0}\n\n      - name: Run Spelling Check test\n        run: spelling::spell_check_files(list.files(pattern = \".*.qmd$\", recursive = TRUE), ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\"))\n        shell: Rscript {0}\n\n      - name: Install testthat\n        run: if (!require(\"testthat\")) install.packages(\"testthat\")\n        shell: Rscript {0}\n\n      - name: test typos\n        run: testthat::test_that(desc = \"No Typo\", code = {\n        no_problem <- spelling::spell_check_files(path = \"inst/WORDLIST_EXAMPLE.txt\", ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\"))\n        spellcheck <- spelling::spell_check_files(list.files(pattern = \".*.qmd$\", recursive = TRUE), ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\"))\n        testthat::expect_equal(object = spellcheck, expected = no_problem)\n        })\n        shell: Rscript {0}\n```\n:::\n\n\n\n## Change language\n\nThis works fine for English, but what if we write in German?\nThe `spelling` package depends on the `hunspell` package.\nThis package comes with the English dictionary pre-installed.\nFurther, it looks at the user library for any other dictionaries requested in the `spelling` function call.\n\nWe can add dictionaries to the user library in the OS we are using to locally check the spelling in our projects.\nAs soon as we want to spell-check on GitHub (with CICD) it gets a bit more tricky because we need to reference a library file within the CICD workflow.\n\nLet's write a file that contains a German quote (by *JW von Goethe*).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# zitat <- file(\"Zitat.txt\", encoding = \"UTF-8\")\n# write(x = \"Es hört doch jeder nur, was er verowokjnsthet.\", file = \"Zitat.txt\")\nwrite_lines(\"Es hört doch jeder nur, was er versthet.\", file = \"Zitat.txt\")\n```\n:::\n\n\nThe `spelling` package does not recognize the language in a file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspelling::spell_check_files(\"Zitat.txt\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  WORD       FOUND IN\ndoch       Zitat.txt:1\nhört      Zitat.txt:1\njeder      Zitat.txt:1\nnur        Zitat.txt:1\nversthet   Zitat.txt:1\n```\n:::\n:::\n\n\nWe can list the dictionaries that are currently available to the hunspell package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunspell::list_dictionaries()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"en_AU\" \"en_CA\" \"en_GB\" \"en_US\"\n```\n:::\n:::\n\n\nApparently, only English dictionaries are available at the moment.\nYou can download UTF-8 encoded dictionaries from the [LibreOffice GitHub repo fork](https://github.com/JetBrains/hunspell-dictionaries).\nFor me, the easiest way was to download the entire repo as a `.zip` folder and then move the dictionary files manually into the repo in which you want to spell-check using that dictionary.\n\n`hunspell` requires two dictionary files for a language: the `.dic` and the `.aff` file.\nIn this example we take the German dictionary files `de_DE_frami.aff` and `de_DE_frami.dic` and save them in the `inst` folder where our `WORDLIST_EXAMPLE.txt` file is as well.\nI am not sure why, but sometimes `hunspell` will look for the file `de_CH_FRAMI.dic` when we specify `lang = \"inst/de_CH_frami\"` so make sure to rename the `.dic` and `.aff` files as `de_DE_FRAMI.aff` and `de_DE_FRAMI.dic`, just to be sure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files(\"../../inst\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"de_CH_FRAMI.aff\"      \"de_CH_FRAMI.dic\"      \"de_DE_FRAMI.aff\"     \n[4] \"de_DE_FRAMI.dic\"      \"WORDLIST_EXAMPLE.txt\" \"WORDLIST.txt\"        \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nspelling::spell_check_files(\"Zitat.txt\", lang = \"../../inst/de_CH_FRAMI\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  WORD        FOUND IN\nversthet.   Zitat.txt:1\n```\n:::\n:::\n\n\nNow we just have to fix the error and check again.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_lines(\"Es hört doch jeder nur, was er versteht.\", file = \"Zitat.txt\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nspelling::spell_check_files(\"Zitat.txt\", lang = \"../../inst/de_CH_FRAMI\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNo spelling errors found.\n```\n:::\n:::\n\n\nThe `.yml` file for the german spell-check would like this: \n\n\n\n::: {.cell}\n\n```{.yml .cell-code}\nname: Spellcheck\non:\n  pull_request: {branches: ['main']}\njobs:\n  Spelling:\n    runs-on: ubuntu-latest\n    container: {image: \"rocker/tidyverse:4.2.1\"}\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n\n      - name: Install spelling\n        run: if (!require(\"spelling\")) install.packages(\"spelling\")\n        shell: Rscript {0}\n\n      - name: Run Spelling Check test\n        run: spelling::spell_check_files(list.files(pattern = \".*.qmd$\", recursive = TRUE), ignore = readr::read_lines(\"inst/WORDLIST.txt\"), lang = \"inst/de_CH_frami\")\n        shell: Rscript {0}\n\n      - name: Install testthat\n        run: if (!require(\"testthat\")) install.packages(\"testthat\")\n        shell: Rscript {0}\n\n      - name: test typos\n        run: testthat::test_that(desc = \"No Typo\", code = {\n        no_problem <- spelling::spell_check_files(path = \"inst/WORDLIST_EXAMPLE.txt\", ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\"), lang = \"inst/de_CH_FRAMI\")\n        spellcheck <- spelling::spell_check_files(list.files(pattern = \".*.qmd$\", recursive = TRUE), ignore = readr::read_lines(\"inst/WORDLIST_EXAMPLE.txt\"), lang = \"inst/de_CH_FRAMI\")\n        testthat::expect_equal(object = spellcheck, expected = no_problem)\n        })\n        shell: Rscript {0}\n```\n:::\n\n\n\n## Conclusion\n\nYou should now be able to run a spell-check on your quarto files. \nFurther, you know how to implement a GitHub CICD pipeline for spell-checks in any language with available dictionary files. \nThis also allows you to implement other R-code based CICD pipelines. \n\nFor your (and my) convenience, I have created book-templates for both [English](https://github.com/StefanThoma/en_quarto_template) and [German](https://github.com/StefanThoma/de_quarto_template) quarto books.\nThey include CICD pipelines for both spelling and style check, and also implement a CICD publishing workflow. \nPlease read the respective `readme.md` file for more information.\n\n<!--------------- appendices go here ----------------->\n",
>>>>>>> origin/main
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}